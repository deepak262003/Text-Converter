
@using System.Text.Json;

@page "/Components/PdfGenerator"
@inject TextConvertor _TextConvertor;
@inject debug _debug;
@inject IJSRuntime _IJSRuntime;

<br />
<p>@_debug._debug</p>

<button class="btn btn-primary" @onclick="pdfHandler"> Generate Pdf</button>
<button class="btn btn-success" @onclick="imageHandler"> Generate image</button>
<button class="btn btn-dark" @onclick="svgHandler"> Generate svg</button>
@if (imageNames.Count != 0)
{
    <button @onclick="clearHandler" style="margin-left:4px " class="btn btn-danger">Clear Files</button>
}

<br/>
<br/>
@* <input type="file" multiple @ref="fileInput /> *@

<InputFile OnChange="UploadFile" style="width:393px" class="form-control" id="formFileMultiple" multiple accept=".jpg, .jpeg, .png .svg" />


<br />

<div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" @onchange="downloadHandler"/>
    <i> <label> Enable Download</label> </i>
</div>
<br />


 @* <img height="1000px" width="1200px" id="pic"/><br/><br/> *@
<div class="form-group shadow-textarea">
    <textarea style="height: 350px;width:100%;background-color:#242222;color:white" @oninput="textHandler" class="form-control z-depth-1" id="exampleFormControlTextarea6" rows="3" placeholder="Write Typst code here..." required></textarea>
</div>

<div class="container parent-con">
<div class="row gx-3">
@if (blobUrls != null&& format== "svg")
{
 @foreach (var blobUrl in blobUrls)
 {
                <div class="col-md-4 mt-3">
                    <div class="image-wrap" >
                        <iframe src="@blobUrl" /><br /><button class="btn btn-success " @onclick="()=>{viewSvgHandler(blobUrl);}">view</button>

        </div> 
        </div>
 }
}
        @if (blobUrls != null && format == "png")
        {
            @foreach (var blobUrl in blobUrls)
            {
                <div class="col-md-3 mt-3">
                    <div class="image-wrap">
                        <img src="@blobUrl" @onclick="()=>{viewHandler(blobUrl);}" />
                    </div>
                </div>
            }
        }
</div>
</div>


@code {
    private ElementReference fileInput;

    string input{ get; set; } = string.Empty;
    string text{ get; set; } = "hello Enter a text";
    string debug { get; set; } = "";
    string details { get; set; } = "view details";
    int num { get; set; } = 11;
    string path { get; set; } = "";
    string format { get; set; } = string.Empty;
    public List<string> blobUrls { get; set; }
    private List<string> base64Data = new List<string>();
    private List<string> imageNames = new List<string>();
    string isDownload { get; set; } = "False";

    public Image? image;

    public class Page
    {
        public int number { get; set; }
        public string data { get; set; }
    }

    public class Image
    {
        public string name { get; set; }
        public string type_ { get; set; }
        public List<Page> pages {get; set;}
    }
    public void textHandler(ChangeEventArgs e)
    {
        input = e.Value.ToString().Trim();
        StateHasChanged();
    }

    public async void editHandler()
    {
        await _IJSRuntime.InvokeVoidAsync("openEditor", DotNetObjectReference.Create(this));
    }


    public async void imageHandler()
    {
        if (input.Length != 0)
        {
            format = "png";
            await generateImage(input,"png");
        }
        else
        {
            _IJSRuntime.InvokeVoidAsync("alertMessage", "Field cannot be empty...");
        }
    }

    public void clearHandler()
    {
        imageNames.Clear();
        base64Data.Clear();
        _TextConvertor.RemoveData();
        _debug.setDebug(string.Join(" ", imageNames));
        _IJSRuntime.InvokeVoidAsync("alertMessage", "All files are cleared...");
        StateHasChanged();
    }

    // public void fileHandler(ChangeEventArgs e)
    // {
    //     // string filename = e.Value.ToString().Remove(0, 12);
    //     // fileNames.Add(filename);
    //     // _debug.setDebug(String.Join(" ", fileNames.ToArray()));
    // }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {   try
            {
                using (var stream = file.OpenReadStream(2485760))
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        var bytes = memoryStream.ToArray();
                        var base64 = Convert.ToBase64String(bytes);
                        base64Data.Add(string.Format("{0}-{1}",file.Name,base64));
                        imageNames.Add(file.Name);
                        _debug.setDebug(string.Join(" ", imageNames));
                    }
                }
            }
            catch(IOException ex)
            {
                _IJSRuntime.InvokeVoidAsync("alertMessage", "file size exceeded...(max 2 mb)");
            }
        }
    }


    public void downloadHandler(ChangeEventArgs e)
    {
        isDownload = e.Value.ToString();
    }


    public async void pdfHandler()
    {
        if(input.Length!=0){
            format = "pdf";
            if(input!=null&&input.Length!=0)
                await generatePdf(input, "pdf");
        }
        else
        {
            _IJSRuntime.InvokeVoidAsync("alertMessage", "Field cannot be empty...");
        }
    }

    public async void svgHandler()
    {
        if (input.Length != 0)
        {
            format = "svg";
            if(input!=null&&input.Length!=0)
                await generateImage(input, "svg");
        }
        else
        {
            _IJSRuntime.InvokeVoidAsync("alertMessage", "Field cannot be empty...");
        }
    }

    public async void viewHandler(string url)
    {
        await _IJSRuntime.InvokeVoidAsync("viewImage",url,"png",isDownload);
        StateHasChanged();
    }

    public async void viewSvgHandler(string url)
    {
        details = "hello";
        await _IJSRuntime.InvokeVoidAsync("viewsvg", url,isDownload);
        StateHasChanged();
    }

    [JSInvokable]
    public void textUpdate(string data)
    {
        text = data;
        input = data;
        StateHasChanged();
    }


    public async Task generatePdf(string data,string format)
    {
        _TextConvertor.SetText(data);
       // _debug.setDebug(base64Data.Count.ToString());
        _TextConvertor.AddData(base64Data);
        text = _TextConvertor.GetPdfBase64EncString();
        await _IJSRuntime.InvokeVoidAsync("openPdf", text ,format,isDownload);
    }

    public async Task generateImage(string data,string format)
    {
        _TextConvertor.SetText(data);
        _TextConvertor.AddData(base64Data);
        var result =  _TextConvertor.GetImageJsonString(format);
        try
        {
            image = JsonSerializer.Deserialize<Image>(result);
            num = image.pages.Count;

        }
        catch(JsonException ex)
        {
        }
        var Mime = (format == "svg") ? "svg+xml" : "png";
        text = isDownload;
        var Urls =  await _IJSRuntime.InvokeAsync<List<string>>("openImage", (image==null)?null:image.pages, Mime , isDownload,result);
        blobUrls = Urls;
        StateHasChanged();
    }
}
